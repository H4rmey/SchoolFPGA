library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
entity CircleSprite is
    port
    (
        clk25 : in STD_LOGIC;
        input_x : in integer;
        input_y : in integer;

        redOut : out STD_LOGIC;
        greenOut : out STD_LOGIC;
        blueOut : out STD_LOGIC
    );
end CircleSprite;

architecture Behavioral of CircleSprite is

    TYPE CircleArray IS ARRAY (0 to 15, 0 to 15) of STD_LOGIC_VECTOR(2 downto 0);
    Constant circleData : CircleArray :=
    (
        ("011", "011", "011", "011", "011", "011", "100", "100", "100", "100", "011", "011", "011", "011", "011", "011"),
        ("011", "011", "011", "011", "100", "100", "100", "100", "100", "100", "100", "100", "011", "011", "011", "011"),
        ("011", "011", "011", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "011", "011", "011"),
        ("011", "011", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "011", "011"),
        ("011", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "011"),
        ("011", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "011"),
        ("100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100"),
        ("100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100"),
        ("100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100"),
        ("100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100"),
        ("011", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "011"),
        ("011", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "011"),
        ("011", "011", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "011", "011"),
        ("011", "011", "011", "100", "100", "100", "100", "100", "100", "100", "100", "100", "100", "011", "011", "011"),
        ("011", "011", "011", "011", "100", "100", "100", "100", "100", "100", "100", "100", "011", "011", "011", "011"),
        ("011", "011", "011", "011", "011", "011", "100", "100", "100", "100", "011", "011", "011", "011", "011", "011")
    );

begin
    convert : process(input_x, input_y, clk25)
    begin
        if (rising_edge(clk25)) then
            if (hCountIn >= (x - size_x)) and (hCountIn < (x + size_x)) and (vCountIn >= (y - size_y)) and (vCountIn < (y + size_y)) then
                redOut      <= circleData(input_x, input_y)(0);
                greenOut    <= circleData(input_x, input_y)(1);
                blueOut     <= circleData(input_x, input_y)(2);
            else
                redOut      <= 0;
                greenOut    <= 1;
                blueOut     <= 1;
            end if;
        end if;
    end process;
end Behavioral;
